Profiler report : a_star_report_7.3_1.pdf

Algorithm : A*  Manhattan distance

Puzzle 2: 
 
Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.6 MiB     42.6 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result
 
Max queue size: 172
 
Action sequence:
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['RIGHT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
 
State sequence:
[[6, 7, 3], [1, 5, 2], ['*', 4, 8]]
[[6, 7, 3], ['*', 5, 2], [1, 4, 8]]
[['*', 7, 3], [6, 5, 2], [1, 4, 8]]
[[7, '*', 3], [6, 5, 2], [1, 4, 8]]
[[7, 3, '*'], [6, 5, 2], [1, 4, 8]]
[[7, 3, 2], [6, 5, '*'], [1, 4, 8]]
[[7, 3, 2], [6, '*', 5], [1, 4, 8]]
[[7, 3, 2], [6, 4, 5], [1, '*', 8]]
[[7, 3, 2], [6, 4, 5], ['*', 1, 8]]
[[7, 3, 2], ['*', 4, 5], [6, 1, 8]]
[['*', 3, 2], [7, 4, 5], [6, 1, 8]]
[[3, '*', 2], [7, 4, 5], [6, 1, 8]]
[[3, 4, 2], [7, '*', 5], [6, 1, 8]]
[[3, 4, 2], [7, 1, 5], [6, '*', 8]]
[[3, 4, 2], [7, 1, 5], ['*', 6, 8]]
[[3, 4, 2], ['*', 1, 5], [7, 6, 8]]
[['*', 4, 2], [3, 1, 5], [7, 6, 8]]
[[4, '*', 2], [3, 1, 5], [7, 6, 8]]
[[4, 1, 2], [3, '*', 5], [7, 6, 8]]
[[4, 1, 2], [3, 6, 5], [7, '*', 8]]
[[4, 1, 2], [3, 6, 5], ['*', 7, 8]]
[[4, 1, 2], ['*', 6, 5], [3, 7, 8]]
[['*', 1, 2], [4, 6, 5], [3, 7, 8]]
[[1, '*', 2], [4, 6, 5], [3, 7, 8]]
[[1, 6, 2], [4, '*', 5], [3, 7, 8]]
[[1, 6, 2], ['*', 4, 5], [3, 7, 8]]
[[1, 6, 2], [3, 4, 5], ['*', 7, 8]]
[[1, 6, 2], [3, 4, 5], [7, '*', 8]]
[[1, 6, 2], [3, '*', 5], [7, 4, 8]]
[[1, '*', 2], [3, 6, 5], [7, 4, 8]]
[['*', 1, 2], [3, 6, 5], [7, 4, 8]]
[[3, 1, 2], ['*', 6, 5], [7, 4, 8]]
[[3, 1, 2], [6, '*', 5], [7, 4, 8]]
[[3, 1, 2], [6, 4, 5], [7, '*', 8]]
[[3, 1, 2], [6, 4, 5], ['*', 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 37

----------------------------------------------------------------------------------------------------------

Profiler report : a_star_report_7.3_2.pdf
 
Algorithm : A*  Manhattan distance

Puzzle 3:

Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.9 MiB     42.9 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result

Max queue size: 602

Action sequence:
['RIGHT', 0, 1]
['DOWN', 1, 1]
['RIGHT', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['RIGHT', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['RIGHT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['UP', 1, 1]
['RIGHT', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['UP', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
 
State sequence:
[[8, '*', 6], [4, 1, 3], [7, 2, 5]]
[[8, 1, 6], [4, '*', 3], [7, 2, 5]]
[[8, 1, 6], [4, 3, '*'], [7, 2, 5]]
[[8, 1, 6], [4, 3, 5], [7, 2, '*']]
[[8, 1, 6], [4, 3, 5], [7, '*', 2]]
[[8, 1, 6], [4, 3, 5], ['*', 7, 2]]
[[8, 1, 6], ['*', 3, 5], [4, 7, 2]]
[['*', 1, 6], [8, 3, 5], [4, 7, 2]]
[[1, '*', 6], [8, 3, 5], [4, 7, 2]]
[[1, 6, '*'], [8, 3, 5], [4, 7, 2]]
[[1, 6, 5], [8, 3, '*'], [4, 7, 2]]
[[1, 6, 5], [8, 3, 2], [4, 7, '*']]
[[1, 6, 5], [8, 3, 2], [4, '*', 7]]
[[1, 6, 5], [8, 3, 2], ['*', 4, 7]]
[[1, 6, 5], ['*', 3, 2], [8, 4, 7]]
[[1, 6, 5], [3, '*', 2], [8, 4, 7]]
[[1, '*', 5], [3, 6, 2], [8, 4, 7]]
[['*', 1, 5], [3, 6, 2], [8, 4, 7]]
[[3, 1, 5], ['*', 6, 2], [8, 4, 7]]
[[3, 1, 5], [6, '*', 2], [8, 4, 7]]
[[3, 1, 5], [6, 4, 2], [8, '*', 7]]
[[3, 1, 5], [6, 4, 2], ['*', 8, 7]]
[[3, 1, 5], ['*', 4, 2], [6, 8, 7]]
[['*', 1, 5], [3, 4, 2], [6, 8, 7]]
[[1, '*', 5], [3, 4, 2], [6, 8, 7]]
[[1, 5, '*'], [3, 4, 2], [6, 8, 7]]
[[1, 5, 2], [3, 4, '*'], [6, 8, 7]]
[[1, 5, 2], [3, 4, 7], [6, 8, '*']]
[[1, 5, 2], [3, 4, 7], [6, '*', 8]]
[[1, 5, 2], [3, '*', 7], [6, 4, 8]]
[[1, 5, 2], [3, 7, '*'], [6, 4, 8]]
[[1, 5, 2], [3, 7, 8], [6, 4, '*']]
[[1, 5, 2], [3, 7, 8], [6, '*', 4]]
[[1, 5, 2], [3, '*', 8], [6, 7, 4]]
[[1, '*', 2], [3, 5, 8], [6, 7, 4]]
[['*', 1, 2], [3, 5, 8], [6, 7, 4]]
[[3, 1, 2], ['*', 5, 8], [6, 7, 4]]
[[3, 1, 2], [6, 5, 8], ['*', 7, 4]]
[[3, 1, 2], [6, 5, 8], [7, '*', 4]]
[[3, 1, 2], [6, 5, 8], [7, 4, '*']]
[[3, 1, 2], [6, 5, '*'], [7, 4, 8]]
[[3, 1, 2], [6, '*', 5], [7, 4, 8]]
[[3, 1, 2], [6, 4, 5], [7, '*', 8]]
[[3, 1, 2], [6, 4, 5], ['*', 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 46
----------------------------------------------------------------------------------------------------------

Profiler report : a_star_report_7.3_3.pdf

Algorithm: A* Manhattan distance  

Puzzle 4: 

Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.7 MiB     42.7 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result

Max queue size: 626

Action sequence:
['LEFT', 2, 1]
['UP', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['UP', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['RIGHT', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['RIGHT', 1, 1]
['DOWN', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
 
State sequence:
[[7, 3, 4], [2, 5, 1], [6, '*', 8]]
[[7, 3, 4], [2, '*', 1], [6, 5, 8]]
[[7, 3, 4], ['*', 2, 1], [6, 5, 8]]
[['*', 3, 4], [7, 2, 1], [6, 5, 8]]
[[3, '*', 4], [7, 2, 1], [6, 5, 8]]
[[3, 4, '*'], [7, 2, 1], [6, 5, 8]]
[[3, 4, 1], [7, 2, '*'], [6, 5, 8]]
[[3, 4, 1], [7, '*', 2], [6, 5, 8]]
[[3, '*', 1], [7, 4, 2], [6, 5, 8]]
[[3, 1, '*'], [7, 4, 2], [6, 5, 8]]
[[3, 1, 2], [7, 4, '*'], [6, 5, 8]]
[[3, 1, 2], [7, '*', 4], [6, 5, 8]]
[[3, 1, 2], ['*', 7, 4], [6, 5, 8]]
[[3, 1, 2], [6, 7, 4], ['*', 5, 8]]
[[3, 1, 2], [6, 7, 4], [5, '*', 8]]
[[3, 1, 2], [6, '*', 4], [5, 7, 8]]
[[3, 1, 2], [6, 4, '*'], [5, 7, 8]]
[[3, 1, 2], [6, 4, 8], [5, 7, '*']]
[[3, 1, 2], [6, 4, 8], [5, '*', 7]]
[[3, 1, 2], [6, 4, 8], ['*', 5, 7]]
[[3, 1, 2], ['*', 4, 8], [6, 5, 7]]
[[3, 1, 2], [4, '*', 8], [6, 5, 7]]
[[3, 1, 2], [4, 5, 8], [6, '*', 7]]
[[3, 1, 2], [4, 5, 8], [6, 7, '*']]
[[3, 1, 2], [4, 5, '*'], [6, 7, 8]]
[[3, 1, 2], [4, '*', 5], [6, 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 28

----------------------------------------------------------------------------------------------------------

Profiler report : a_star_report_7.3_4.pdf

Algorithm: A* Manhattan distance  
 
Puzzle 5: 

Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     43.3 MiB     43.3 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result

Max queue size: 634

Action sequence:
['UP', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['RIGHT', 1, 1]
['RIGHT', 1, 2]
['UP', 0, 2]
['LEFT', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['RIGHT', 1, 1]
['UP', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['RIGHT', 1, 2]
['UP', 0, 2]
['LEFT', 0, 1]
['DOWN', 1, 1]
['RIGHT', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['UP', 1, 1]
['UP', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['UP', 1, 1]
['RIGHT', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['UP', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
 
State sequence:
[[1, 3, 8], [4, '*', 5], [6, 7, 2]]
[[1, '*', 8], [4, 3, 5], [6, 7, 2]]
[['*', 1, 8], [4, 3, 5], [6, 7, 2]]
[[4, 1, 8], ['*', 3, 5], [6, 7, 2]]
[[4, 1, 8], [3, '*', 5], [6, 7, 2]]
[[4, 1, 8], [3, 5, '*'], [6, 7, 2]]
[[4, 1, '*'], [3, 5, 8], [6, 7, 2]]
[[4, '*', 1], [3, 5, 8], [6, 7, 2]]
[['*', 4, 1], [3, 5, 8], [6, 7, 2]]
[[3, 4, 1], ['*', 5, 8], [6, 7, 2]]
[[3, 4, 1], [5, '*', 8], [6, 7, 2]]
[[3, '*', 1], [5, 4, 8], [6, 7, 2]]
[[3, 1, '*'], [5, 4, 8], [6, 7, 2]]
[[3, 1, 8], [5, 4, '*'], [6, 7, 2]]
[[3, 1, 8], [5, '*', 4], [6, 7, 2]]
[[3, 1, 8], ['*', 5, 4], [6, 7, 2]]
[['*', 1, 8], [3, 5, 4], [6, 7, 2]]
[[1, '*', 8], [3, 5, 4], [6, 7, 2]]
[[1, 5, 8], [3, '*', 4], [6, 7, 2]]
[[1, 5, 8], [3, 4, '*'], [6, 7, 2]]
[[1, 5, '*'], [3, 4, 8], [6, 7, 2]]
[[1, '*', 5], [3, 4, 8], [6, 7, 2]]
[[1, 4, 5], [3, '*', 8], [6, 7, 2]]
[[1, 4, 5], [3, 8, '*'], [6, 7, 2]]
[[1, 4, 5], [3, 8, 2], [6, 7, '*']]
[[1, 4, 5], [3, 8, 2], [6, '*', 7]]
[[1, 4, 5], [3, '*', 2], [6, 8, 7]]
[[1, '*', 5], [3, 4, 2], [6, 8, 7]]
[[1, 5, '*'], [3, 4, 2], [6, 8, 7]]
[[1, 5, 2], [3, 4, '*'], [6, 8, 7]]
[[1, 5, 2], [3, 4, 7], [6, 8, '*']]
[[1, 5, 2], [3, 4, 7], [6, '*', 8]]
[[1, 5, 2], [3, '*', 7], [6, 4, 8]]
[[1, 5, 2], [3, 7, '*'], [6, 4, 8]]
[[1, 5, 2], [3, 7, 8], [6, 4, '*']]
[[1, 5, 2], [3, 7, 8], [6, '*', 4]]
[[1, 5, 2], [3, '*', 8], [6, 7, 4]]
[[1, '*', 2], [3, 5, 8], [6, 7, 4]]
[['*', 1, 2], [3, 5, 8], [6, 7, 4]]
[[3, 1, 2], ['*', 5, 8], [6, 7, 4]]
[[3, 1, 2], [6, 5, 8], ['*', 7, 4]]
[[3, 1, 2], [6, 5, 8], [7, '*', 4]]
[[3, 1, 2], [6, 5, 8], [7, 4, '*']]
[[3, 1, 2], [6, 5, '*'], [7, 4, 8]]
[[3, 1, 2], [6, '*', 5], [7, 4, 8]]
[[3, 1, 2], [6, 4, 5], [7, '*', 8]]
[[3, 1, 2], [6, 4, 5], ['*', 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 49

----------------------------------------------------------------------------------------------------------

Profiler report : a_star_report_7.3_5.pdf

Algorithm: A* Manhattan distance  
 
Puzzle 6

Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.7 MiB     42.7 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result
 
Max queue size: 53
 
Action sequence:
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
 
State sequence:
[[8, 7, 6], [5, 4, 3], [2, '*', 1]]
[[8, 7, 6], [5, 4, 3], ['*', 2, 1]]
[[8, 7, 6], ['*', 4, 3], [5, 2, 1]]
[['*', 7, 6], [8, 4, 3], [5, 2, 1]]
[[7, '*', 6], [8, 4, 3], [5, 2, 1]]
[[7, 6, '*'], [8, 4, 3], [5, 2, 1]]
[[7, 6, 3], [8, 4, '*'], [5, 2, 1]]
[[7, 6, 3], [8, 4, 1], [5, 2, '*']]
[[7, 6, 3], [8, 4, 1], [5, '*', 2]]
[[7, 6, 3], [8, 4, 1], ['*', 5, 2]]
[[7, 6, 3], ['*', 4, 1], [8, 5, 2]]
[['*', 6, 3], [7, 4, 1], [8, 5, 2]]
[[6, '*', 3], [7, 4, 1], [8, 5, 2]]
[[6, 3, '*'], [7, 4, 1], [8, 5, 2]]
[[6, 3, 1], [7, 4, '*'], [8, 5, 2]]
[[6, 3, 1], [7, 4, 2], [8, 5, '*']]
[[6, 3, 1], [7, 4, 2], [8, '*', 5]]
[[6, 3, 1], [7, 4, 2], ['*', 8, 5]]
[[6, 3, 1], ['*', 4, 2], [7, 8, 5]]
[['*', 3, 1], [6, 4, 2], [7, 8, 5]]
[[3, '*', 1], [6, 4, 2], [7, 8, 5]]
[[3, 1, '*'], [6, 4, 2], [7, 8, 5]]
[[3, 1, 2], [6, 4, '*'], [7, 8, 5]]
[[3, 1, 2], [6, 4, 5], [7, 8, '*']]
[[3, 1, 2], [6, 4, 5], [7, '*', 8]]
[[3, 1, 2], [6, 4, 5], ['*', 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 28
 
----------------------------------------------------------------------------------------------------------

Puzzle : 2 : Breath first search
 
Profiler report : bfs_7.3_1.pdf
 
Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     43.2 MiB     43.2 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result

Max queue size: 68949
 
Action sequence:
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
 
State sequence:
[[6, 7, 3], [1, 5, 2], ['*', 4, 8]]
[[6, 7, 3], ['*', 5, 2], [1, 4, 8]]
[['*', 7, 3], [6, 5, 2], [1, 4, 8]]
[[7, '*', 3], [6, 5, 2], [1, 4, 8]]
[[7, 3, '*'], [6, 5, 2], [1, 4, 8]]
[[7, 3, 2], [6, 5, '*'], [1, 4, 8]]
[[7, 3, 2], [6, '*', 5], [1, 4, 8]]
[[7, 3, 2], ['*', 6, 5], [1, 4, 8]]
[[7, 3, 2], [1, 6, 5], ['*', 4, 8]]
[[7, 3, 2], [1, 6, 5], [4, '*', 8]]
[[7, 3, 2], [1, '*', 5], [4, 6, 8]]
[[7, 3, 2], ['*', 1, 5], [4, 6, 8]]
[['*', 3, 2], [7, 1, 5], [4, 6, 8]]
[[3, '*', 2], [7, 1, 5], [4, 6, 8]]
[[3, 1, 2], [7, '*', 5], [4, 6, 8]]
[[3, 1, 2], ['*', 7, 5], [4, 6, 8]]
[[3, 1, 2], [4, 7, 5], ['*', 6, 8]]
[[3, 1, 2], [4, 7, 5], [6, '*', 8]]
[[3, 1, 2], [4, '*', 5], [6, 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 21
 
----------------------------------------------------------------------------------------------------------

Puzzle : 3 : Breath first search
 
Profiler report : bfs_7.3_2.pdf

Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.3 MiB     42.3 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result
 
Max queue size: 136151
 
Action sequence:
['DOWN', 1, 0]
['RIGHT', 1, 1]
['DOWN', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['UP', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['RIGHT', 1, 1]
['DOWN', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['RIGHT', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
 
State sequence:
[[4, 8, 6], ['*', 1, 3], [7, 2, 5]]
[[4, 8, 6], [1, '*', 3], [7, 2, 5]]
[[4, 8, 6], [1, 2, 3], [7, '*', 5]]
[[4, 8, 6], [1, 2, 3], [7, 5, '*']]
[[4, 8, 6], [1, 2, '*'], [7, 5, 3]]
[[4, 8, 6], [1, '*', 2], [7, 5, 3]]
[[4, '*', 6], [1, 8, 2], [7, 5, 3]]
[[4, 6, '*'], [1, 8, 2], [7, 5, 3]]
[[4, 6, 2], [1, 8, '*'], [7, 5, 3]]
[[4, 6, 2], [1, '*', 8], [7, 5, 3]]
[[4, '*', 2], [1, 6, 8], [7, 5, 3]]
[['*', 4, 2], [1, 6, 8], [7, 5, 3]]
[[1, 4, 2], ['*', 6, 8], [7, 5, 3]]
[[1, 4, 2], [6, '*', 8], [7, 5, 3]]
[[1, 4, 2], [6, 5, 8], [7, '*', 3]]
[[1, 4, 2], [6, 5, 8], [7, 3, '*']]
[[1, 4, 2], [6, 5, '*'], [7, 3, 8]]
[[1, 4, 2], [6, '*', 5], [7, 3, 8]]
[[1, 4, 2], [6, 3, 5], [7, '*', 8]]
[[1, 4, 2], [6, 3, 5], ['*', 7, 8]]
[[1, 4, 2], ['*', 3, 5], [6, 7, 8]]
[[1, 4, 2], [3, '*', 5], [6, 7, 8]]
[[1, '*', 2], [3, 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 24

------------------------------------------------------------------------------------------------------

Puzzle : 4 : Breath first search
 
Profiler report : bfs_7.3_3.pdf

Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.9 MiB     42.9 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result
 
Max queue size: 76969

Action sequence:
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['RIGHT', 1, 2]
['UP', 0, 2]
['LEFT', 0, 1]
['DOWN', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['RIGHT', 1, 2]
['UP', 0, 2]
['LEFT', 0, 1]
['LEFT', 0, 0]
 
State sequence:
[[7, 3, 4], [2, 5, 1], [6, '*', 8]]
[[7, 3, 4], [2, 5, 1], ['*', 6, 8]]
[[7, 3, 4], ['*', 5, 1], [2, 6, 8]]
[['*', 3, 4], [7, 5, 1], [2, 6, 8]]
[[3, '*', 4], [7, 5, 1], [2, 6, 8]]
[[3, 5, 4], [7, '*', 1], [2, 6, 8]]
[[3, 5, 4], [7, 1, '*'], [2, 6, 8]]
[[3, 5, '*'], [7, 1, 4], [2, 6, 8]]
[[3, '*', 5], [7, 1, 4], [2, 6, 8]]
[[3, 1, 5], [7, '*', 4], [2, 6, 8]]
[[3, 1, 5], ['*', 7, 4], [2, 6, 8]]
[[3, 1, 5], [2, 7, 4], ['*', 6, 8]]
[[3, 1, 5], [2, 7, 4], [6, '*', 8]]
[[3, 1, 5], [2, '*', 4], [6, 7, 8]]
[[3, 1, 5], ['*', 2, 4], [6, 7, 8]]
[['*', 1, 5], [3, 2, 4], [6, 7, 8]]
[[1, '*', 5], [3, 2, 4], [6, 7, 8]]
[[1, 2, 5], [3, '*', 4], [6, 7, 8]]
[[1, 2, 5], [3, 4, '*'], [6, 7, 8]]
[[1, 2, '*'], [3, 4, 5], [6, 7, 8]]
[[1, '*', 2], [3, 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 22




------------------------------------------------------------------------------------------------------ 
Puzzle : 5 : Breath first search
 
Profiler report : bfs_7.3_4.pdf
 
Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.3 MiB     42.3 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result

Max queue size: 105272
Action sequence:
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['UP', 0, 2]
['LEFT', 0, 1]
['DOWN', 1, 1]
['DOWN', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
 
State sequence:
[[1, 3, 8], [4, 7, 5], [6, 2, '*']]
[[1, 3, 8], [4, 7, '*'], [6, 2, 5]]
[[1, 3, 8], [4, '*', 7], [6, 2, 5]]
[[1, 3, 8], [4, 2, 7], [6, '*', 5]]
[[1, 3, 8], [4, 2, 7], ['*', 6, 5]]
[[1, 3, 8], ['*', 2, 7], [4, 6, 5]]
[['*', 3, 8], [1, 2, 7], [4, 6, 5]]
[[3, '*', 8], [1, 2, 7], [4, 6, 5]]
[[3, 2, 8], [1, '*', 7], [4, 6, 5]]
[[3, 2, 8], ['*', 1, 7], [4, 6, 5]]
[[3, 2, 8], [4, 1, 7], ['*', 6, 5]]
[[3, 2, 8], [4, 1, 7], [6, '*', 5]]
[[3, 2, 8], [4, 1, 7], [6, 5, '*']]
[[3, 2, 8], [4, 1, '*'], [6, 5, 7]]
[[3, 2, '*'], [4, 1, 8], [6, 5, 7]]
[[3, '*', 2], [4, 1, 8], [6, 5, 7]]
[[3, 1, 2], [4, '*', 8], [6, 5, 7]]
[[3, 1, 2], [4, 5, 8], [6, '*', 7]]
[[3, 1, 2], [4, 5, 8], [6, 7, '*']]
[[3, 1, 2], [4, 5, '*'], [6, 7, 8]]
[[3, 1, 2], [4, '*', 5], [6, 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 23

--------------------------------------------------------------------------------------------------------
Puzzle : 6 : Breath first search

Profiler report : bfs_7.3_5.pdf

Filename: /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/line_profiler/line_profiler.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106     42.6 MiB     42.6 MiB           1           @functools.wraps(func)
   107                                                 def wrapper(*args, **kwds):
   108                                                     self.enable_by_count()
   109                                                     try:
   110                                                         result = func(*args, **kwds)
   111                                                     finally:
   112                                                         self.disable_by_count()
   113                                                     return result
 
Max queue size: 178223
Action sequence:
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
 
State sequence:
[[8, 7, 6], [5, 4, 3], [2, '*', 1]]
[[8, 7, 6], [5, 4, 3], ['*', 2, 1]]
[[8, 7, 6], ['*', 4, 3], [5, 2, 1]]
[['*', 7, 6], [8, 4, 3], [5, 2, 1]]
[[7, '*', 6], [8, 4, 3], [5, 2, 1]]
[[7, 6, '*'], [8, 4, 3], [5, 2, 1]]
[[7, 6, 3], [8, 4, '*'], [5, 2, 1]]
[[7, 6, 3], [8, 4, 1], [5, 2, '*']]
[[7, 6, 3], [8, 4, 1], [5, '*', 2]]
[[7, 6, 3], [8, 4, 1], ['*', 5, 2]]
[[7, 6, 3], ['*', 4, 1], [8, 5, 2]]
[['*', 6, 3], [7, 4, 1], [8, 5, 2]]
[[6, '*', 3], [7, 4, 1], [8, 5, 2]]
[[6, 3, '*'], [7, 4, 1], [8, 5, 2]]
[[6, 3, 1], [7, 4, '*'], [8, 5, 2]]
[[6, 3, 1], [7, 4, 2], [8, 5, '*']]
[[6, 3, 1], [7, 4, 2], [8, '*', 5]]
[[6, 3, 1], [7, 4, 2], ['*', 8, 5]]
[[6, 3, 1], ['*', 4, 2], [7, 8, 5]]
[['*', 3, 1], [6, 4, 2], [7, 8, 5]]
[[3, '*', 1], [6, 4, 2], [7, 8, 5]]
[[3, 1, '*'], [6, 4, 2], [7, 8, 5]]
[[3, 1, 2], [6, 4, '*'], [7, 8, 5]]
[[3, 1, 2], [6, 4, 5], [7, 8, '*']]
[[3, 1, 2], [6, 4, 5], [7, '*', 8]]
[[3, 1, 2], [6, 4, 5], ['*', 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 28
 
----------------------------------------------------------------------------------------------------------
Puzzle 2: Manhattan distance + Linear conflict 

Max queue size: 683

Action sequence:
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
 
State sequence:
[[6, 7, 3], [1, 5, 2], ['*', 4, 8]]
[[6, 7, 3], ['*', 5, 2], [1, 4, 8]]
[['*', 7, 3], [6, 5, 2], [1, 4, 8]]
[[7, '*', 3], [6, 5, 2], [1, 4, 8]]
[[7, 3, '*'], [6, 5, 2], [1, 4, 8]]
[[7, 3, 2], [6, 5, '*'], [1, 4, 8]]
[[7, 3, 2], [6, '*', 5], [1, 4, 8]]
[[7, 3, 2], ['*', 6, 5], [1, 4, 8]]
[[7, 3, 2], [1, 6, 5], ['*', 4, 8]]
[[7, 3, 2], [1, 6, 5], [4, '*', 8]]
[[7, 3, 2], [1, '*', 5], [4, 6, 8]]
[[7, 3, 2], ['*', 1, 5], [4, 6, 8]]
[['*', 3, 2], [7, 1, 5], [4, 6, 8]]
[[3, '*', 2], [7, 1, 5], [4, 6, 8]]
[[3, 1, 2], [7, '*', 5], [4, 6, 8]]
[[3, 1, 2], ['*', 7, 5], [4, 6, 8]]
[[3, 1, 2], [4, 7, 5], ['*', 6, 8]]
[[3, 1, 2], [4, 7, 5], [6, '*', 8]]
[[3, 1, 2], [4, '*', 5], [6, 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 21

------------------------------------------------------------------------------------------------------
Puzzle 3: Manhattan distance + Linear conflict 

Max queue size: 842

Action sequence:
['DOWN', 1, 0]
['RIGHT', 1, 1]
['DOWN', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['UP', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['RIGHT', 1, 1]
['DOWN', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['DOWN', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['RIGHT', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
 
State sequence:
[[4, 8, 6], ['*', 1, 3], [7, 2, 5]]
[[4, 8, 6], [1, '*', 3], [7, 2, 5]]
[[4, 8, 6], [1, 2, 3], [7, '*', 5]]
[[4, 8, 6], [1, 2, 3], [7, 5, '*']]
[[4, 8, 6], [1, 2, '*'], [7, 5, 3]]
[[4, 8, 6], [1, '*', 2], [7, 5, 3]]
[[4, '*', 6], [1, 8, 2], [7, 5, 3]]
[[4, 6, '*'], [1, 8, 2], [7, 5, 3]]
[[4, 6, 2], [1, 8, '*'], [7, 5, 3]]
[[4, 6, 2], [1, '*', 8], [7, 5, 3]]
[[4, '*', 2], [1, 6, 8], [7, 5, 3]]
[['*', 4, 2], [1, 6, 8], [7, 5, 3]]
[[1, 4, 2], ['*', 6, 8], [7, 5, 3]]
[[1, 4, 2], [6, '*', 8], [7, 5, 3]]
[[1, 4, 2], [6, 5, 8], [7, '*', 3]]
[[1, 4, 2], [6, 5, 8], [7, 3, '*']]
[[1, 4, 2], [6, 5, '*'], [7, 3, 8]]
[[1, 4, 2], [6, '*', 5], [7, 3, 8]]
[[1, 4, 2], [6, 3, 5], [7, '*', 8]]
[[1, 4, 2], [6, 3, 5], ['*', 7, 8]]
[[1, 4, 2], ['*', 3, 5], [6, 7, 8]]
[[1, 4, 2], [3, '*', 5], [6, 7, 8]]
[[1, '*', 2], [3, 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 24

------------------------------------------------------------------------------------------------------
Puzzle 4: Manhattan distance + Linear conflict 

Max queue size: 1194

Action sequence:
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['RIGHT', 1, 2]
['UP', 0, 2]
['LEFT', 0, 1]
['DOWN', 1, 1]
['LEFT', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['UP', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['DOWN', 1, 1]
['RIGHT', 1, 2]
['UP', 0, 2]
['LEFT', 0, 1]
['LEFT', 0, 0]
 
State sequence:
[[7, 3, 4], [2, 5, 1], [6, '*', 8]]
[[7, 3, 4], [2, 5, 1], ['*', 6, 8]]
[[7, 3, 4], ['*', 5, 1], [2, 6, 8]]
[['*', 3, 4], [7, 5, 1], [2, 6, 8]]
[[3, '*', 4], [7, 5, 1], [2, 6, 8]]
[[3, 5, 4], [7, '*', 1], [2, 6, 8]]
[[3, 5, 4], [7, 1, '*'], [2, 6, 8]]
[[3, 5, '*'], [7, 1, 4], [2, 6, 8]]
[[3, '*', 5], [7, 1, 4], [2, 6, 8]]
[[3, 1, 5], [7, '*', 4], [2, 6, 8]]
[[3, 1, 5], ['*', 7, 4], [2, 6, 8]]
[[3, 1, 5], [2, 7, 4], ['*', 6, 8]]
[[3, 1, 5], [2, 7, 4], [6, '*', 8]]
[[3, 1, 5], [2, '*', 4], [6, 7, 8]]
[[3, 1, 5], ['*', 2, 4], [6, 7, 8]]
[['*', 1, 5], [3, 2, 4], [6, 7, 8]]
[[1, '*', 5], [3, 2, 4], [6, 7, 8]]
[[1, 2, 5], [3, '*', 4], [6, 7, 8]]
[[1, 2, 5], [3, 4, '*'], [6, 7, 8]]
[[1, 2, '*'], [3, 4, 5], [6, 7, 8]]
[[1, '*', 2], [3, 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 22

------------------------------------------------------------------------------------------------------
Puzzle 5: Manhattan distance + Linear conflict 

Max queue size: 1930

Action sequence:
['UP', 1, 1]
['UP', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['RIGHT', 1, 1]
['UP', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['LEFT', 1, 1]
['UP', 0, 1]
['LEFT', 0, 0]
['DOWN', 1, 0]
['DOWN', 2, 0]
['RIGHT', 2, 1]
['RIGHT', 2, 2]
['UP', 1, 2]
['LEFT', 1, 1]
['LEFT', 1, 0]
['UP', 0, 0]
 
State sequence:
[[1, 3, 8], [4, '*', 5], [6, 7, 2]]
[[1, '*', 8], [4, 3, 5], [6, 7, 2]]
[[1, 8, '*'], [4, 3, 5], [6, 7, 2]]
[[1, 8, 5], [4, 3, '*'], [6, 7, 2]]
[[1, 8, 5], [4, 3, 2], [6, 7, '*']]
[[1, 8, 5], [4, 3, 2], [6, '*', 7]]
[[1, 8, 5], [4, 3, 2], ['*', 6, 7]]
[[1, 8, 5], ['*', 3, 2], [4, 6, 7]]
[[1, 8, 5], [3, '*', 2], [4, 6, 7]]
[[1, '*', 5], [3, 8, 2], [4, 6, 7]]
[[1, 5, '*'], [3, 8, 2], [4, 6, 7]]
[[1, 5, 2], [3, 8, '*'], [4, 6, 7]]
[[1, 5, 2], [3, '*', 8], [4, 6, 7]]
[[1, '*', 2], [3, 5, 8], [4, 6, 7]]
[['*', 1, 2], [3, 5, 8], [4, 6, 7]]
[[3, 1, 2], ['*', 5, 8], [4, 6, 7]]
[[3, 1, 2], [4, 5, 8], ['*', 6, 7]]
[[3, 1, 2], [4, 5, 8], [6, '*', 7]]
[[3, 1, 2], [4, 5, 8], [6, 7, '*']]
[[3, 1, 2], [4, 5, '*'], [6, 7, 8]]
[[3, 1, 2], [4, '*', 5], [6, 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 23
------------------------------------------------------------------------------------------------------ 
Puzzle 6: Manhattan distance + Linear conflict 

Max queue size: 664

Action sequence:
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
['RIGHT', 0, 1]
['RIGHT', 0, 2]
['DOWN', 1, 2]
['DOWN', 2, 2]
['LEFT', 2, 1]
['LEFT', 2, 0]
['UP', 1, 0]
['UP', 0, 0]
 
State sequence:
[[8, 7, 6], [5, 4, 3], [2, '*', 1]]
[[8, 7, 6], [5, 4, 3], ['*', 2, 1]]
[[8, 7, 6], ['*', 4, 3], [5, 2, 1]]
[['*', 7, 6], [8, 4, 3], [5, 2, 1]]
[[7, '*', 6], [8, 4, 3], [5, 2, 1]]
[[7, 6, '*'], [8, 4, 3], [5, 2, 1]]
[[7, 6, 3], [8, 4, '*'], [5, 2, 1]]
[[7, 6, 3], [8, 4, 1], [5, 2, '*']]
[[7, 6, 3], [8, 4, 1], [5, '*', 2]]
[[7, 6, 3], [8, 4, 1], ['*', 5, 2]]
[[7, 6, 3], ['*', 4, 1], [8, 5, 2]]
[['*', 6, 3], [7, 4, 1], [8, 5, 2]]
[[6, '*', 3], [7, 4, 1], [8, 5, 2]]
[[6, 3, '*'], [7, 4, 1], [8, 5, 2]]
[[6, 3, 1], [7, 4, '*'], [8, 5, 2]]
[[6, 3, 1], [7, 4, 2], [8, 5, '*']]
[[6, 3, 1], [7, 4, 2], [8, '*', 5]]
[[6, 3, 1], [7, 4, 2], ['*', 8, 5]]
[[6, 3, 1], ['*', 4, 2], [7, 8, 5]]
[['*', 3, 1], [6, 4, 2], [7, 8, 5]]
[[3, '*', 1], [6, 4, 2], [7, 8, 5]]
[[3, 1, '*'], [6, 4, 2], [7, 8, 5]]
[[3, 1, 2], [6, 4, '*'], [7, 8, 5]]
[[3, 1, 2], [6, 4, 5], [7, 8, '*']]
[[3, 1, 2], [6, 4, 5], [7, '*', 8]]
[[3, 1, 2], [6, 4, 5], ['*', 7, 8]]
[[3, 1, 2], ['*', 4, 5], [6, 7, 8]]
[['*', 1, 2], [3, 4, 5], [6, 7, 8]]
 
Path cost: 28

----------------------------------------------------------------------------------------------------------
